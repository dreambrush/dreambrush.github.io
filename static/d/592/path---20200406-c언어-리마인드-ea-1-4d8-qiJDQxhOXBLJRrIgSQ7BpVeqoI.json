{"data":{"post":{"id":"0e027ce9-9dec-55c8-b573-f045dad8fbd9","html":"<h1>목표</h1>\n<ul>\n<li>대학 과정에서 배웠던 C언어의 핵심 내용을 빠르게 복습한다.</li>\n<li>리마인드가 필요했던 내용을 기록하여 추 후 빠르게 훑어볼 수 있도록 한다.</li>\n</ul>\n<h1>C언어 리마인드</h1>\n<h2>연산자</h2>\n<h3>비트연산자</h3>\n<table>\n<thead>\n<tr>\n<th>기호</th>\n<th>이름</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&#x26;</td>\n<td>AND 연산</td>\n<td>모두 참일 때 참을 반환</td>\n</tr>\n<tr>\n<td>|</td>\n<td>OR 연산</td>\n<td>하나라도 참일 때 참을 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">^</code></td>\n<td><code class=\"language-text\">XOR 연산</code></td>\n<td><code class=\"language-text\">서로 다를 때 참을 반환</code></td>\n</tr>\n<tr>\n<td>~</td>\n<td>NOT 연산</td>\n<td>반전된 결과를 반환</td>\n</tr>\n<tr>\n<td>&#x3C;&#x3C;</td>\n<td>Left Shift 연산</td>\n<td>비트를 왼쪽으로 이동</td>\n</tr>\n<tr>\n<td>>></td>\n<td>Right Shift 연산</td>\n<td>비트를 오른쪽으로 이동</td>\n</tr>\n</tbody>\n</table>\n<h2>포인터</h2>\n<h3>변수</h3>\n<ul>\n<li>\n<p>선언(좌변항)</p>\n<ul>\n<li>\n<p>포인터(*)</p>\n<ul>\n<li>주소를 가리키는 포인터 변수임을 선언</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>변수(우변항)</p>\n<ul>\n<li>\n<p>주소연산자(&#x26;)</p>\n<ul>\n<li>변수의 메모리 시작 주소 값을 반환</li>\n</ul>\n</li>\n<li>\n<p>간접참조연산자(*)</p>\n<ul>\n<li>포인터 변수가 가리키는 주소의 값 반환</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>배열</h3>\n<ul>\n<li>\n<p>배열 포인터는 배열의 첫번째 주소인 배열의 이름을 반환한다.</p>\n</li>\n<li>\n<p>배열 포인터는 연산을 할 때 자료형의 크기만큼 이동한다.</p>\n<ul>\n<li>예를들면, *(a + 1) = a[1], *(a + 2) = a[2]</li>\n</ul>\n</li>\n</ul>\n<h3>함수</h3>\n<ul>\n<li>함수 포인터는 함수의 첫번째 주소인 함수의 이름을 반환한다.</li>\n</ul>\n<h2>메모리</h2>\n<h3>코드 영역</h3>\n<ul>\n<li>소스코드</li>\n</ul>\n<h3>데이터 영역</h3>\n<ul>\n<li>\n<p>변수 종류</p>\n<ul>\n<li>\n<p>전역 변수(global)</p>\n<ul>\n<li>프로그램(다른 파일)에서 전역적으로 접근 가능한 변수</li>\n</ul>\n</li>\n<li>\n<p>정적 변수(static)</p>\n<ul>\n<li>\n<p>내부정적변수</p>\n<ul>\n<li>함수 내부에 선언되며 함수 내에서만 접근</li>\n</ul>\n</li>\n<li>\n<p>외부정적변수</p>\n<ul>\n<li>함수 외부에 선언되며 파일 내에 한해서 전역적으로 접근</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>변수 수명</p>\n<ul>\n<li>프로그램 시작과 동시에(main 함수 실행 전) 메모리에 할당된다.</li>\n</ul>\n</li>\n</ul>\n<h3>힙 영역</h3>\n<ul>\n<li>\n<p>동적 할당 변수</p>\n<ul>\n<li>\n<p>할당</p>\n<ul>\n<li>malloc()</li>\n</ul>\n</li>\n<li>\n<p>일괄 초기화</p>\n<ul>\n<li>memset()</li>\n</ul>\n</li>\n<li>\n<p>제거</p>\n<ul>\n<li>free()</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>스택 영역</h3>\n<ul>\n<li>\n<p>지역 변수</p>\n<ul>\n<li>지정된 블록내에서만 접근 가능한 변수</li>\n</ul>\n</li>\n<li>\n<p>매개변수</p>\n<ul>\n<li>\n<p>값에 의한 전달(복사)</p>\n<ul>\n<li>값을 전달받아 복사하여 새롭게 변수를 생성하여 메모리를 할당</li>\n</ul>\n</li>\n<li>\n<p>참조에 의한 전달(포인터)</p>\n<ul>\n<li>참조 변수의 주소를 전달받아 참조변수 자체를 사용</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>변수 수명</p>\n<ul>\n<li>함수가 실행될 때 메모리에 할당되고, 종료되면 메모리에서 해제된다.</li>\n<li>함수 특성상 나중에 실행된 함수가 먼저 종료되므로 LIFO 자료구조인 스택에 할당된다.</li>\n</ul>\n</li>\n</ul>\n<h3>레지스터 영역</h3>\n<ul>\n<li>\n<p>레지스터 변수(register)</p>\n<ul>\n<li>CPU의 레지스터에 할당</li>\n</ul>\n</li>\n</ul>\n<h2>구조체</h2>\n<h3>구조체</h3>\n<ul>\n<li>값 타입</li>\n<li>스택에 할당</li>\n<li>GC가 필요없어 속도가 빠름</li>\n<li>값 복사에 의한 메모리 낭비 주위 필요</li>\n</ul>\n<h3>객체와의 비교</h3>\n<ul>\n<li>참조 타입</li>\n<li>힙에 할당</li>\n<li>GC가 필요하여 속도가 느림</li>\n<li>접근제어, 추상화, 상속 등 객체지향을 따름</li>\n</ul>\n<p><em>XMind: ZEN - Trial Version</em></p>","fields":{"slug":"/20200406-C언어-리마인드/"},"frontmatter":{"title":"C언어 리마인드","date":"2020-04-06T00:00:00.000Z","author":"dreambrush","category":"컴퓨터공학","cover":null}},"authornote":{"id":"31bf52c1-f895-54aa-86bd-54ae748536c7","html":"<h3>Dreambrush</h3>\n<p>I’m a full-stack web developer.<br>\n“Leanject” development community leader.</p>"},"site":{"siteMetadata":{"facebook":{"appId":"gatsby-dreambrush-blog"}}}},"pageContext":{"slug":"/20200406-C언어-리마인드/","prev":{"id":"23837b59-4267-5f7e-8027-fcd9933dcbdc","fields":{"slug":"/2020-03-28--markdown-sample-test2/","source":"posts"},"frontmatter":{"title":"Markdown view test2","date":"2020-03-28T00:00:00.000Z","category":"Test"}},"source":"posts"}}